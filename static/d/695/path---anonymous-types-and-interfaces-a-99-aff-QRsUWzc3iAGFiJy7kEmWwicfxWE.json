{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"1c0b6618-cbcc-588a-bbbd-70efa2bddcc6","html":"<p>I finally had a chance to sit and work with LINQ for a bit, and while it is very cool, a little bit of its luster was lost when I can assign interfaces to the anonymous classes generated by the queries. Meaning I can not do something like:</p>\n<pre class=\"code\"><font size=\"2\"><span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">interface</span> </font><font size=\"2\"><span style=\"COLOR: rgb(43,145,175)\">IExample\n</span>{\n    <span style=\"COLOR: rgb(0,0,255)\">string</span> Name { <span style=\"COLOR: rgb(0,0,255)\">get</span>; <span style=\"COLOR: rgb(0,0,255)\">set</span>; }\n    <span style=\"COLOR: rgb(0,0,255)\">string</span> Description { <span style=\"COLOR: rgb(0,0,255)\">get</span>; <span style=\"COLOR: rgb(0,0,255)\">set</span>; }\n}\n<span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">class</span> </font><font size=\"2\"><span style=\"COLOR: rgb(43,145,175)\">DataGenerator\n</span>{\n    <span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(43,145,175)\">IEnumerable</span>&lt;<span style=\"COLOR: rgb(43,145,175)\">IExample</span>&gt; GetExamples(<span style=\"COLOR: rgb(0,0,255)\">string</span> categoryName)\n    {<br />        </font><font size=\"2\"><span style=\"COLOR: rgb(0,128,0)\">//Context Definition<br /></span>        <span style=\"COLOR: rgb(43,145,175)\">IEnumerable</span>&lt;<span style=\"COLOR: rgb(43,145,175)\">IExample</span>&gt; examples =\n            <span style=\"COLOR: rgb(0,0,255)\">from</span> x <span style=\"COLOR: rgb(0,0,255)\">in</span> db.Examples </font><font size=\"2\"><span style=\"COLOR: rgb(0,128,0)\">//LINQ to SQL Class<br /></span>            <span style=\"COLOR: rgb(0,0,255)\">where</span> x.Category.Name = categoryName\n            <span style=\"COLOR: rgb(0,0,255)\">select</span> <span style=\"COLOR: rgb(0,0,255)\">new</span> IExamples { Name = x.Name<br />                                 , Description = x.Description } ;\n<span style=\"COLOR: rgb(0,128,0)\">            // There is probobly better syntax for this</span>\n        <span style=\"COLOR: rgb(0,0,255)\">return</span> examples;\n    }\n}</font></pre>\n<p>Now I know I could instead do</p>\n<p><font size=\"2\"><span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">class</span> </font><font size=\"2\"><span style=\"COLOR: rgb(43,145,175)\">Example<br /> </span>{<br />     <span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">string</span> Name { <span style=\"COLOR: rgb(0,0,255)\">get</span>; <span style=\"COLOR: rgb(0,0,255)\">set</span>; }<br />     <span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">string</span> Description { <span style=\"COLOR: rgb(0,0,255)\">get</span>; <span style=\"COLOR: rgb(0,0,255)\">set</span>; }<br /> }<br /> <span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">class</span> </font><font size=\"2\"><span style=\"COLOR: rgb(43,145,175)\">DataGenerator<br /> </span>{<br />     <span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(43,145,175)\">IEnumerable</span>&#x3C;<span style=\"COLOR: rgb(43,145,175)\">Example</span>> GetExamples(<span style=\"COLOR: rgb(0,0,255)\">string</span> categoryName)<br />     {<br />         </font><font size=\"2\"><span style=\"COLOR: rgb(0,128,0)\">//Context Definition<br /> </span>        <span style=\"COLOR: rgb(43,145,175)\">IEnumerable</span>&#x3C;<span style=\"COLOR: rgb(43,145,175)\">Example</span>> examples =<br />             <span style=\"COLOR: rgb(0,0,255)\">from</span> x <span style=\"COLOR: rgb(0,0,255)\">in</span> db.Examples </font><font size=\"2\"><span style=\"COLOR: rgb(0,128,0)\">//LINQ to SQL Class, <br /> </span>            <span style=\"COLOR: rgb(0,0,255)\">where</span> x.Category.Name = categoryName<br />             <span style=\"COLOR: rgb(0,0,255)\">select</span> <span style=\"COLOR: rgb(0,0,255)\">new</span> <span style=\"COLOR: rgb(43,145,175)\">Example</span>{ Name = x.Name, Description = x.Description };</p> </p>\n<p>\n          <span style=\"COLOR: rgb(0,0,255)\">return</span> examples;<br />     }<br /> }<br /> </font>\n</p>\n<p>\n  or if I wanted to continue only exposing an interface\n</p>\n<p>\n   \n</p>\n<pre class=\"code\"><font size=\"2\"><span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">interface</span> </font><font size=\"2\"><span style=\"COLOR: rgb(43,145,175)\">IExample\n</span>{\n    <span style=\"COLOR: rgb(0,0,255)\">string</span> Name { <span style=\"COLOR: rgb(0,0,255)\">get</span>; <span style=\"COLOR: rgb(0,0,255)\">set</span>; }\n    <span style=\"COLOR: rgb(0,0,255)\">string</span> Description { <span style=\"COLOR: rgb(0,0,255)\">get</span>; <span style=\"COLOR: rgb(0,0,255)\">set</span>; }\n}\n<span style=\"COLOR: rgb(0,0,255)\">internal </span><span style=\"COLOR: rgb(0,0,255)\">class</span> <span style=\"COLOR: rgb(43,145,175)\">Example</span>:</font><font size=\"2\"><span style=\"COLOR: rgb(43,145,175)\">IExample\n</span>{\n    <span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">string</span> Name { <span style=\"COLOR: rgb(0,0,255)\">get</span>; <span style=\"COLOR: rgb(0,0,255)\">set</span>; }\n    <span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">string</span> Description { <span style=\"COLOR: rgb(0,0,255)\">get</span>; <span style=\"COLOR: rgb(0,0,255)\">set</span>; }\n}\n<span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(0,0,255)\">class</span> </font><font size=\"2\"><span style=\"COLOR: rgb(43,145,175)\">DataGenerator\n</span>{\n    <span style=\"COLOR: rgb(0,0,255)\">public</span> <span style=\"COLOR: rgb(43,145,175)\">IEnumerable</span>&lt;<span style=\"COLOR: rgb(43,145,175)\">IExample</span>&gt; GetExamples(<span style=\"COLOR: rgb(0,0,255)\">string</span> categoryName)\n    {\n        </font><font size=\"2\"><span style=\"COLOR: rgb(0,128,0)\">//LINQ to SQL Context Definition\n</span>        <span style=\"COLOR: rgb(43,145,175)\">var</span> examples =\n            <span style=\"COLOR: rgb(0,0,255)\">from</span> x <span style=\"COLOR: rgb(0,0,255)\">in</span> db.Examples <br /></font><font size=\"2\">            <span style=\"COLOR: rgb(0,0,255)\">where</span> x.Category.Name = categoryName\n            <span style=\"COLOR: rgb(0,0,255)\">select</span> <span style=\"COLOR: rgb(0,0,255)\">new</span> <span style=\"COLOR: rgb(43,145,175)\">Example</span>{ Name = x.Name<br />                              , Description = x.Description };\n\n        <span style=\"COLOR: rgb(0,0,255)\">return</span> examples.OfType&lt;<span style=\"COLOR: rgb(43,145,175)\">IExample</span>&gt;();\n    }\n}</font></pre>\n<p>\n  Over all this isn&#8217;t a big issue since the second method works just fine for what I am trying to accomplish for the most part. But it feels kind of off having to make a throwaway class to accomplish this.\n</p>\n<div class=\"wlWriterSmartContent\" id=\"scid:0767317B-992E-4b12-91E0-4F059A8CECA8:64e079e2-7a70-461e-9620-f53e9be4aab2\" style=\"PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px\">\n  Technorati Tags: <a rel=\"tag\" href=\"http://technorati.com/tags/LINQ\">LINQ</a>, <a rel=\"tag\" href=\"http://technorati.com/tags/Anonymous%20Types\">Anonymous Types</a>, <a rel=\"tag\" href=\"http://technorati.com/tags/Interface\">Interface</a>\n</div>\n<p>\n  <a href=\"http://11011.net/software/vspaste\"></a><img src=\"http://seanlynch.io/aggbug/37.aspx\" width=\"1\" height=\"1\">\n</p>\n<p><span class=\"tve-leads-two-step-trigger tl-2step-trigger-0\"></span><span class=\"tve-leads-two-step-trigger tl-2step-trigger-0\"></span></p>","frontmatter":{"title":"Anonymous Types and Interfaces","date":"December 12, 2007"}}},"pageContext":{"slug":"/anonymous-types-and-interfaces/","previous":{"fields":{"slug":"/2007-12-11-linq-anonymous-types-and-interfaces-revisited/"},"frontmatter":{"title":"LINQ, Anonymous Types and Interfaces Revisited"}},"next":{"fields":{"slug":"/a-few-simple-mvc-control-suggestions/"},"frontmatter":{"title":"A few simple MVC control suggestions"}}}}