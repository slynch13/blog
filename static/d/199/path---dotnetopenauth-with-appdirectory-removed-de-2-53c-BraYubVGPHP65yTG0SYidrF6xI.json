{"data":{"site":{"siteMetadata":{"title":"Sean's Blog","author":"Sean Lynch"}},"markdownRemark":{"id":"aaa83b18-f0dc-5203-a5cb-6fce419ad195","html":"<p>In my <a href=\"http://seanlynch.io/open-id-with-dotnetopenid/\">previous post</a> I had talked about my decision to implement OpenId, and how DotNetOpenAuth worked well for this. In this post I will talk a little about the only issue that I ran into while doing this.</p>\n<p>The root of this issue had to do with how my hosting is setup for sites that have low traffic. I host these sites on winhost which allows for an unlimited number of domain pointers. They also have the URL Rewrite module, so I can rewrite <a href=\"http://webquestbuilder.com/\">http://webquestbuilder.com/</a> to <a href=\"http://webquestbuilder.com/sitedir\">http://webquestbuilder.com/sitedir</a> enabling the site to be moved later when demand requires more horsepower without having to deal with the removal of the sub directory.</p>\n<p>The problem that came from this setup was that DotNetOpenAuth determined that the releam was webquestbuilder.com/sitedir instead of webquestbuilder.com, and returned from openid with to the sitedir/authenticate.  <a href=\"http://blog.nerdbank.net/\" target=\"_blank\">Andrew Arnott</a> pointed me in the right direction pretty quick after my tweet. Here is what I ended up with to fix this, it is in 2 parts.</p>\n<p>The first is making the request:</p>\n<pre class=\"code\"><code>\nif (isInSubDir)\n{\nrequest = openid.CreateRequest(Request.Form[\"openid_identifier\"], new Realm(\"http://webquestbuilder.com/\"),\nnew Uri(\"http://webquestbuilder.com/User/Authenticate/\"));\n}\nelse\n{\nrequest = openid.CreateRequest(Request.Form[\"openid_identifier\"]);\n}`\n  \nThe second part is dealing with the response:\n  \n`\nvar isInSubDir = Request.ApplicationPath!=\"/\";\nIAuthenticationResponse response;\nif (isInSubDir)\n{\nvar absoluteUri = httpRequest.Url.AbsoluteUri;\nvar rawUrl = httpRequest.RawUrl;\nif(isInSubDir)\n{\nabsoluteUri = absoluteUri.Replace(Request.ApplicationPath, \"\");\nrawUrl = rawUrl.Replace(Request.ApplicationPath, \"\");\n}\nvar httpRequestInfo = new HttpRequestInfo(httpRequest.HttpMethod, new Uri(absoluteUri), rawUrl, headers, httpRequest.InputStream);\nresponse = openid.GetResponse(httpRequestInfo); �\n}\nelse\n{\nresponse = openid.GetResponse();\n}</code></pre>","frontmatter":{"title":"DotNetOpenAuth with AppDirectory removed","date":"March 02, 2010"}}},"pageContext":{"slug":"/dotnetopenauth-with-appdirectory-removed/","previous":{"fields":{"slug":"/open-id-with-dotnetopenid/"},"frontmatter":{"title":"Open Id with DotNetOpenId"}},"next":{"fields":{"slug":"/migrating-to-wordpress-with-url-rewriting/"},"frontmatter":{"title":"Migrating to WordPress with URL Rewriting"}}}}